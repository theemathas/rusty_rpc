use std::io;

use crate::messages::{MethodAndArgs, ServerMessage};
use crate::ServiceCollection;

/// This trait will be automatically implemented by any user type marked with
/// the `#[service_server_impl]` attribute in the `rusty_rpc_macro` crate. Users
/// should not manually implement this trait. Client-side access to services
/// (via [crate::messages::ServerResult]) does not have this trait.
///
/// For some reason the Send + Sync + 'static bound is needed for
/// `tokio::spawn`.
pub trait RustyRpcServiceServer: Send + Sync + 'static {
    #[doc(hidden)]
    fn parse_and_call_method_locally(
        &mut self,
        method_and_args: MethodAndArgs,
        connection: &mut ServiceCollection,
    ) -> io::Result<ServerMessage>;
}

/// This trait will be automatically implemented by struct types generated by
/// the `interface_file!` macro in the `rusty_rpc_macro` crate. Users should not
/// manually implement this trait.
pub trait RustyRpcStruct {
    // TODO add things needed here.
}
/// i32 is treated like a struct in this library.
impl RustyRpcStruct for i32 {}
